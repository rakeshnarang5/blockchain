what's solidity?
contract oriented programming language

which blockchain does it target?
ethereum

what's remix?
browser based ide for solidity

how to define which solidity version to use?
pragma solidity ^0.4.0;

how to declare a contract?
contract MyFirstContract { }

declare a private variable?
    string private name;


declare getter?
 function getName() returns (string) {
        return name;
    }

declare setter?
function setName(string newName) {
        name = newName;
    }

does this operator work in solidity?
no, it doesn't
function setName(string newName) {
        this.name = newName;
    }
gives
browser/myFirstContract.sol:7:22: Warning: This declaration shadows an existing declaration. function setName(string name) { ^---------^ browser/myFirstContract.sol:5:5: The shadowed declaration is here: string private name; ^-----------------^

int vs uint?
int is signed
uint is unsigned

declare unsigned int?
    uint private age;


how to inherit a contract?
contract inheriting_contract is inherited_contract { }

java vs solidity for inheritance?
java -> extends
solidity -> is

access modifiers in solidity?
public
private
internal === protected (java)

constructor in solidity?
function Bank(uint amount) {
        value = amount;
    }

inheritance with constructed object?
contract MyFirstContract is Bank(100) { 
}

abstract methods in contract?
in_parent: -
function loan() returns (bool);
in_child: -
implementation
function loan() returns (bool) {
return true;
}
if not implemented:-
This contract does not implement all functions and thus cannot be created.

interface?
interface Regulator {
function checkValue(uint amount) returns (bool);
function loan() returns (bool);
}

implement interface?
java -> implements
solidity -> is

how?
contract Bank is Regulator {
function checkValue(uint amount) returns (bool) {
return value >= amount;
}
function loan() returns (bool) {
return value > 0;
}
}

why contract level access modification?
security
so that only creator of contract can add or remove any value

address variable in solidity?
pointer to any address on the ethereum blockchain

modifier keyword?
used to declare a constraint

how to create a constraint that checks for owner's identity?
modifier ownerFunc {
		require(owner == msg.sender);
		_;
	}
	
what does _; signify?
it's a placeholder for the method code
if some method used ownerFunc constraint, it will first check the require,
if that is true, only then rest of the method will be executed
// it kind of looks like AOP of Spring

can we change the execution sequence of require and method content?
yes

how?
modifier ownerFunc {
_;
		require(owner == msg.sender);
	}
now the method body will execute first and then the condition will be checked

throw in solidity?
it is used for exception handling

should you use it?
nopes, it is deprecated in favor of revert, require and assert
throw might be removed in later versions of solidity

how to apply modifier constraints to methods?
by adding name of modifier just before opening bracket of the body
how?
function deposit (uint amount) ownerFunc {
        value += amount;
    }
now the ownerFunc requirement is added to the deposit method

what happens when from a different account on the eth blockchain we try to deposit or withdraw?
requirement ownerFunc fails and an exception is thrown
this way the contract becomes secure

assert?
logical condition; if false, error thrown
just like assertEquals() in java

is throw a function?
nopes, unlike require, assert and revert, throw is an operation and not a function

where is assert generally used?
for validating the inputs at runtime
it always consumes gas

require?
throws exception with revert as opcode
which means gas cost is reversed
this is not sure, but as per understanding
impl in metropolis version of solidity

revert?
it reverts the gas cost incurred during the message

throw gas consumption?
yes, consumes gas all the time

how to add custom modifiers to methods?
like this
function deposit (uint amount) private ownerFunc {
        value += amount;
    }
	it allows or restricts the methods accessible to the inheriting class